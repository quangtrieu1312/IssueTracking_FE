{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_models/alert.ts","webpack:///src/app/_models/cron-to-text-request.ts","webpack:///src/app/_models/signup-request.ts","webpack:///src/app/_models/ticket-info.ts","webpack:///src/app/_models/ticket-request.ts","webpack:///src/app/about/about.component.ts","webpack:///src/app/about/about.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-guard.service.ts","webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/nav-bar/nav-bar.component.ts","webpack:///src/app/nav-bar/nav-bar.component.html","webpack:///src/app/new-ticket/new-ticket.component.ts","webpack:///src/app/new-ticket/new-ticket.component.html","webpack:///src/app/new-ticket/new-ticket.service.ts","webpack:///src/app/shared-data/search.service.ts","webpack:///src/app/signup/signup.component.ts","webpack:///src/app/signup/signup.component.html","webpack:///src/app/signup/signup.service.ts","webpack:///src/app/single-ticket/single-ticket.component.ts","webpack:///src/app/single-ticket/single-ticket.component.html","webpack:///src/app/single-ticket/single-ticket.service.ts","webpack:///src/app/tickets/tickets.component.ts","webpack:///src/app/tickets/tickets.component.html","webpack:///src/app/tickets/tickets.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","Alert","CronToTextRequest","SignupRequest","TicketInfo","TicketRequest","AboutComponent","selector","templateUrl","styleUrls","routes","path","component","canActivate","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","AppModule","declarations","providers","bootstrap","AuthGuardService","authService","router","route","state","isUserLoggedIn","navigate","queryParams","returnUrl","url","providedIn","AuthComponent","authRequest","username","password","errorMsg","hasError","subscribe","params","navigateByUrl","authenticateUser","result","status","registerSuccessfulLogin","error","msg","logout","handleLogin","AuthService","http","USER_NAME_SESSION_ATTRIBUTE_NAME","loginUrl","logoutUrl","httpOptions","headers","withCredentials","user","post","sessionStorage","setItem","removeItem","get","getItem","HomeComponent","NavBarComponent","searchService","changeSearchBox","searchBox","NewTicketComponent","newTicketService","statuses","value","view","newticket","ticket","alert","emails","members","cronToText","addMemberSuccess","ghostMembers","dataLoaded","name","mode","alertTime","cronExpression","description","owner","ticketId","JSON","parse","stringify","length","checked","split","RegExp","filter","str","postTicket","ticketsInfo","forEach","element","includes","push","NewTicketService","ticketUrl","cronToTextRequest","ticketRequest","SearchService","currentSearchBox","asObservable","next","SignupComponent","signupService","signupRequest","successMsg","handleSignup","SignupService","signupUrl","SingleTicketComponent","singleTicketService","newname","newstatus","newmode","newcron","newmembers","newemails","newdescription","newalert","getTicket","join","putTicket","deleteTicket","SingleTicketService","userUrl","userIds","put","delete","TicketsComponent","ticketsService","sortAttribute","direction","pageIndex","pageSize","totalPages","displayedColumns","subscription","getAllTickets","tickets","content","setAlert","goToNewTicket","getPreviousPage","getNextPage","TicketsService","environment","production","bootstrapModule","catch","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export class Alert{\r\n    mode: Boolean;\r\n    alertTime: Date;\r\n    cronExpression: String;\r\n}\r\n","export class CronToTextRequest {\r\n    expression: String\r\n}\r\n","export class SignupRequest{\r\n    username: String;\r\n    password: String;\r\n    password2: String;\r\n    email: String;\r\n}\r\n","import { Alert } from './alert';\r\n\r\nexport class TicketInfo{\r\n    ticketId: String;\r\n    owner: String;\r\n    name: String;\r\n    status: String;\r\n    description: String;\r\n    alert: Alert;\r\n    emails: String[];\r\n    members: String[];\r\n\r\n}","import { Alert } from './alert';\r\n\r\nexport class TicketRequest{\r\n    name: String;\r\n    status: String;\r\n    description: String;\r\n    alert: Alert;\r\n    emails: String[];\r\n    members: String[];\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div>\n    <mat-card class=\"example-card\">\n        <mat-card-header>\n            <div mat-card-avatar class=\"example-header-image\"></div>\n            <mat-card-title>Trieu Truong</mat-card-title>\n            <mat-card-subtitle>Texas Christian University, B. S. Computer Science</mat-card-subtitle>\n        </mat-card-header>\n        <!-- <img mat-card-image src=\"/assets/image/profile.png\" alt=\"Profile pic\"> -->\n        <mat-card-content>\n            <p>\n                Hi, I am the owner of this website, and I am looking for an internship as a web developer or a software\n                engineer. I had a summer working in the industry as a web back-end developer, and I made this personal\n                project to practice full-stack programming.\n                <br /><br />\n                This project utilizes microservice architecture using Spring Boot (for server side) and Angular (for\n                client side): each module is deployed to a seperate Heroku Dyno; the user connects to the front end to\n                make queries to the back end; the back end talks to the MongoDB database to get desired result. I also\n                use Atlas for cloud\n                database, and AWS Route 53 to redirect the current url to my Heroku url.\n            </p>\n\n        </mat-card-content>\n        <mat-card-actions align=\"center\">\n            <ul>\n                <li><a href=\"https://github.com/quangtrieu1312\" target=\"_blank\"><i class=\"fa fa-github\"></i></a></li>\n                <li><a href=\"https://www.linkedin.com/in/trieu-truong/\" target=\"_blank\"><i class=\"fa fa-linkedin\"\n                            aria-hidden=\"true\"></i></a></li>\n                <li><a href=\"/assets/pdf/TrieuTruong_Resume.pdf\" target=\"_blank\"><i class=\"fa fa-file-text\"\n                            aria-hidden=\"true\"></i></a></li>\n            </ul>\n        </mat-card-actions>\n    </mat-card>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { TicketsComponent } from './tickets/tickets.component';\nimport { AuthGuardService } from './auth/auth-guard.service';\nimport { AuthComponent } from './auth/auth.component';\nimport { AboutComponent } from './about/about.component';\nimport { SingleTicketComponent } from './single-ticket/single-ticket.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { NewTicketComponent } from './new-ticket/new-ticket.component';\n\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'login', component: AuthComponent },\n  { path: 'signup', component: SignupComponent },\n  { path: 'ticket', component: TicketsComponent , canActivate: [AuthGuardService]},\n  { path: 'new-ticket', component: NewTicketComponent , canActivate: [AuthGuardService]},\n  { path: 'ticket/:ticketId', component: SingleTicketComponent, canActivate: [AuthGuardService] },\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\n  { path: '**', redirectTo: '/home' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'webpage';\n}\n","<app-nav-bar></app-nav-bar>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { AuthComponent } from './auth/auth.component';\nimport { HomeComponent } from './home/home.component';\nimport { TicketsComponent } from './tickets/tickets.component';\nimport { AuthService } from './auth/auth.service';\nimport { TicketsService } from './tickets/tickets.service';\nimport { AboutComponent } from './about/about.component';\n\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle'\nimport { MatGridListModule } from '@angular/material/grid-list'\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDialogModule } from '@angular/material/dialog'\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { SingleTicketComponent } from './single-ticket/single-ticket.component';\nimport { SingleTicketService } from './single-ticket/single-ticket.service';\nimport { SignupComponent } from './signup/signup.component';\nimport { NewTicketComponent } from './new-ticket/new-ticket.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavBarComponent,\n    AuthComponent,\n    HomeComponent,\n    TicketsComponent,\n    AboutComponent,\n    SingleTicketComponent,\n    SignupComponent,\n    NewTicketComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    DragDropModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatTableModule,\n    MatCardModule,\n    MatButtonModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatIconModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatDialogModule\n  ],\n  providers: [AuthService, TicketsService, SingleTicketService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isUserLoggedIn()) {\n      // logged in so return true\n      return true;\n    }\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthRequest } from '../_models/auth-request';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n  authRequest: AuthRequest = {\n    username: '',\n    password: ''\n  };\n  returnUrl: string;\n  errorMsg: string = '';\n  hasError: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService) { }\n\n  ngOnInit() {\n    // Get the query params\n    if (!this.isUserLoggedIn()) {\n      this.route.queryParams.subscribe(params => this.returnUrl = params['returnUrl'] || '/home');\n    }\n    else {\n      this.route.queryParams.subscribe(params => this.returnUrl = '/home');\n      this.router.navigateByUrl(this.returnUrl);\n    }\n  }\n\n  isUserLoggedIn() {\n    return this.authService.isUserLoggedIn();\n  }\n  handleLogin() {\n    this.authService.authenticateUser(this.authRequest).subscribe((result) => {\n      if (result.status === 'true') {\n        this.authService.registerSuccessfulLogin(this.authRequest.username);\n        this.router.navigateByUrl(this.returnUrl);\n      }\n    }, (result) => {\n      this.hasError = true;\n      this.errorMsg = result.error.msg;\n    })\n  }\n\n  handleLogout() {\n    this.authService.logout();\n  }\n\n}\n","<div class=\"container col-lg-6\">\n    <h1 class=\"text-center\">Login</h1>\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <form class=\"form-group\">\n                <div class=\"form-group\">\n                    <label for=\"email\">User Name :</label>\n                    <input type=\"text\" class=\"form-control\" id=\"username\" [(ngModel)]=\"authRequest.username\"\n                        placeholder=\"Enter User Name\" name=\"username\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"pwd\">Password:</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" [(ngModel)]=\"authRequest.password\"\n                        placeholder=\"Enter password\" name=\"password\">\n                </div>\n                <div class=\"button-wrapper\">\n                    <button (click)=handleLogin() class=\"btn btn-dark\">Login</button>\n                </div>\n                <div class=\"button-wrapper\">\n                    <button [routerLink]=\"'/signup'\" class=\"btn btn-dark\">Signup</button>\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class=\"error\" *ngIf='hasError'>\n        <p>{{errorMsg}}</p>\n    </div>\n</div>","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthRequest } from '../_models/auth-request';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  // BASE_PATH: 'http://localhost:8080'\n  USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n  loginUrl = 'https://mysterious-reaches-08183.herokuapp.com/login';\n\n  logoutUrl = 'https://mysterious-reaches-08183.herokuapp.com/logout';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-type': 'application/json'\n    }),\n    withCredentials: true\n  };\n  public user: String;\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  authenticateUser(authRequest: AuthRequest): Observable<any> {\n    this.user = authRequest.username;\n    return this.http.post<AuthRequest>(this.loginUrl, authRequest, this.httpOptions);\n  }\n\n\n  registerSuccessfulLogin(user) {\n    sessionStorage.setItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME, user)\n  }\n\n  logout() {\n    sessionStorage.removeItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n    this.user = null;\n    this.http.get(this.logoutUrl, this.httpOptions);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME)\n    if (user === null) { return false; }\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME)\n    if (user === null) { return ''; }\n    return user;\n  }\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  constructor() {\n\n  }\n\n}","<div class=\"image\"></div>\r\n<div class=\"centered\">\r\n    <h1>Project Zero</h1>\r\n    <h2>Manage your tasks</h2>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\nimport { SearchService } from '../shared-data/search.service';\n\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private searchService: SearchService) { }\n\n  searchBox: string;\n\n  mySubscription: any;\n\n  ngOnInit() {\n  }\n\n  handleLogout() {\n    this.authService.logout();\n    this.router.navigateByUrl('/home');\n  }\n\n  isUserLoggedIn() {\n    return this.authService.isUserLoggedIn();\n  }\n\n  isAtTickets() {\n    return this.router.url === '/ticket';\n  }\n\n  searchNameOrDescription() {\n    this.searchService.changeSearchBox(this.searchBox);\n    this.router.navigateByUrl('ticket');\n  }\n\n}\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n    <a class=\"navbar-brand\" routerLink=\"home\">\n        <img src=\"/assets/image/favicon.png\" alt=\"\">\n    </a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul class=\"navbar-nav mr-auto\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" routerLink=\"home\" routerLinkActive=\"active\">Home</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" routerLink=\"about\" routerLinkActive=\"active\">About me</a>\n            </li>\n            <li class=\"nav-item\" *ngIf='isUserLoggedIn()'>\n                <a class=\"nav-link\" routerLink=\"ticket\" routerLinkActive=\"active\">Ticket</a>\n            </li>\n            <li class=\"nav-item\" *ngIf='isUserLoggedIn()'>\n                <button class=\"btn btn-outline-light\" (click)=handleLogout()>Logout</button>\n            </li>\n            <li class=\"nav-item\" *ngIf='!isUserLoggedIn()'>\n                <a class=\"nav-link\" routerLink=\"login\" routerLinkActive=\"active\">Login</a>\n            </li>\n        </ul>\n        <form class=\"form-inline my-2 my-lg-0\" *ngIf=\"isAtTickets()\">\n            <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Ticket name, description\" aria-label=\"Search\"\n                [(ngModel)]=\"searchBox\" name=\"searchBox\">\n            <button class=\"btn btn-outline-light my-2 my-sm-0\" type=\"submit\"\n                (click)=\"searchNameOrDescription()\">Search</button>\n        </form>\n    </div>\n</nav>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TicketInfo } from '../_models/ticket-info';\nimport { NewTicketService } from './new-ticket.service';\nimport { Alert } from '../_models/alert';\n\n@Component({\n  selector: 'app-new-ticket',\n  templateUrl: './new-ticket.component.html',\n  styleUrls: ['./new-ticket.component.css']\n})\nexport class NewTicketComponent implements OnInit {\n  statuses: any[] =\n    [\n      {\n        value: 'NEW',\n        view: 'NEW'\n      },\n      {\n        value: 'ADMITTED',\n        view: 'ADMITTED'\n      },\n      {\n        value: 'IN_PROCESS',\n        view: 'IN PROCESS'\n      },\n      {\n        value: 'ON_HOLD',\n        view: 'ON HOLD'\n      },\n      {\n        value: 'REVISED',\n        view: 'REVISED'\n      },\n      {\n        value: 'SOLVED',\n        view: 'SOLVED'\n      },\n      {\n        value: 'CLOSED',\n        view: 'CLOSED'\n      }\n    ];\n\n  newticket: TicketInfo = new TicketInfo();\n  ticket: TicketInfo = new TicketInfo();\n  alert: Alert = new Alert();\n  emails: String = '';\n  members: String = '';\n  cronToText: String = '';\n  addMemberSuccess = true;\n  ghostMembers = [];\n  dataLoaded = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private newTicketService: NewTicketService) {\n  }\n\n\n  ngOnInit(): void {\n    this.ticket.name = 'Ticket example';\n    this.alert.mode = true;\n    this.alert.alertTime = null;\n    this.alert.cronExpression = '0 1 2 3 4 ? *';\n    this.ticket.alert = this.alert;\n    this.ticket.emails = ['myemail@example.com', 'youremail@example.com'];\n    this.ticket.members = ['myusername', 'yourusername'];\n    this.ticket.description = 'Cron expression format' +\n      '------------------ Sec | Min | Hour |\tDay Of Month | Month | Day Of Week | Year ------------------' +\n      '0 1 2 3 4 ? *: At 02:01:00am, on the 3rd day, in April, in every year. -----------------' +\n      'For more information, visit: https://www.freeformatter.com/cron-expression-generator-quartz.html#cronconverttotext';\n    this.ticket.owner = 'Owner example';\n    this.ticket.status = 'NEW';\n    this.ticket.ticketId = 'ExampleId';\n    this.newticket = JSON.parse(JSON.stringify(this.ticket));\n    this.newticket.description = '';\n    this.dataLoaded = true;\n  }\n\n  goToTicketList() {\n    this.router.navigateByUrl('ticket');\n  }\n\n  hasMembers() {\n    return this.ticket.members != null && this.ticket.members.length != 0;\n  }\n\n  hasEmails() {\n    return this.ticket.emails != null && this.ticket.emails.length != 0;\n  }\n\n  setTicketMode(e) {\n    if (e.checked) {\n      this.ticket.alert.mode = true;\n    } else {\n      this.ticket.alert.mode = false;\n    }\n  }\n  handleSave() {\n    this.newticket.members = this.members.split(new RegExp('[,; ]')).filter(function (str) {\n      return str != null && str != '';\n    });\n    this.newticket.emails = this.emails.split(new RegExp('[,; ]')).filter(function (str) {\n      return str != null && str != '';\n    });\n    this.newTicketService.postTicket(this.newticket).subscribe((result) => {\n      this.ticket = result.ticketsInfo[0];\n      this.addMemberSuccess = true;\n      this.ghostMembers = [];\n      this.newticket.members.forEach(element => {\n        if (!this.ticket.members.includes(element)) {\n          this.addMemberSuccess = false;\n          this.ghostMembers.push(element);\n        }\n      });\n      if (this.addMemberSuccess) {\n        this.router.navigateByUrl('ticket');\n      }\n    }, (result) => {\n\n    })\n  }\n\n}\n","<mat-card class=\"example-card\" *ngIf='dataLoaded'>\n    <mat-card-header style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n        <mat-card-title style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n            Ticket example\n        </mat-card-title>\n        <mat-card-subtitle>\n            Click to fill in form\n        </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n        <p><b>Status: </b>{{ticket.status}}</p>\n\n        <p><b>Alert: </b>\n            <mat-slide-toggle [(ngModel)]='ticket.alert.mode' (change)='setTicketMode($event)'></mat-slide-toggle>\n        </p>\n        <p><b>Cron Expression:</b> {{ticket.alert.cronExpression}}</p>\n        <div *ngIf='hasMembers()'>\n            <b>Members: </b>\n            <ng-container *ngFor='let member of ticket.members'\n                style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n                <div class=\"member\" style=\"display:inline-block;\">{{member}};</div>\n            </ng-container>\n        </div>\n        <div *ngIf='hasEmails()'>\n            <b>Extra emails: </b>\n            <ng-container *ngFor='let email of ticket.emails' style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n                <p class=\"email\" style=\"display:inline-block;\">{{email}};</p>\n            </ng-container>\n        </div>\n        <p style=\"min-width: 320px ;max-width: 4000px; width: 100%;\"><b>Description: </b>{{ticket.description}}</p>\n        <mat-expansion-panel class=\"mat-elevation-z0\">\n            <mat-expansion-panel-header style=\"position: absolute; right: 0px; top: 0px;\"></mat-expansion-panel-header>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\">\n                    <input matInput placeholder=\"Ticket name\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\"\n                        [(ngModel)]=\"newticket.name\">\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\">\n                    <mat-label>Status</mat-label>\n                    <mat-select [(ngModel)]=\"newticket.status\">\n                        <mat-option *ngFor=\"let status of statuses\"\n                            style=\"min-width: 320px ;max-width: 2048px; width: 100%;\" [value]=\"status.value\">\n                            {{status.view}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\">\n                    <input matInput placeholder=\"Cron Expression\" [(ngModel)]=\"newticket.alert.cronExpression\">\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\">\n                    <input matInput placeholder=\"Members\" [(ngModel)]=\"members\">\n                    <div *ngIf=\"!addMemberSuccess && members!=''\" class=\"alert alert-danger\">\n                        <div [hidden]=\"addMemberSuccess || members===''\">\n                            Cannot find members {{ghostMembers}}\n                        </div>\n                    </div>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\">\n                    <input matInput placeholder=\"Extra emails\" [(ngModel)]=\"emails\"\n                        pattern=\"([a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}[;, ]{0,})+\" ngModel #emailref=\"ngModel\">\n                    <div *ngIf=\"emailref.errors &&(emailref.touched || emailref.dirty)\" class=\"alert alert-danger\">\n                        <div [hidden]=\"!emailref.errors?.pattern\">\n                            Invalid email\n                        </div>\n                    </div>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n                    <textarea matInput placeholder=\"Description\" rows=\"5\" cols=\"40\"\n                        [(ngModel)]=\"newticket.description\"></textarea>\n                </mat-form-field>\n            </div>\n        </mat-expansion-panel>\n    </mat-card-content>\n    <mat-card-actions align=\"end\">\n        <button mat-button routerLink=\"/ticket\">BACK</button>\n        <button mat-button (click)=\"handleSave()\" [disabled]=\"emailref.errors?.pattern\">SAVE</button>\n    </mat-card-actions>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TicketInfo } from '../_models/ticket-info';\nimport { TicketRequest } from '../_models/ticket-request';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CronToTextRequest } from '../_models/cron-to-text-request';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewTicketService {\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-type': 'application/json'\n    }),\n    withCredentials: true\n  };\n\n  ticketUrl = 'https://mysterious-reaches-08183.herokuapp.com/ticket';\n\n  constructor(private http: HttpClient) { }\n\n  cronToTextRequest : CronToTextRequest = new CronToTextRequest();\n  ticketRequest: TicketRequest = new TicketRequest();\n  postTicket(ticket: TicketInfo): Observable<any> {\n    this.ticketRequest.name = ticket.name;\n    this.ticketRequest.status = ticket.status;\n    this.ticketRequest.alert = ticket.alert;\n    this.ticketRequest.members = ticket.members;\n    this.ticketRequest.emails = ticket.emails;\n    this.ticketRequest.description = ticket.description;\n    return this.http.post<TicketInfo>(this.ticketUrl, this.ticketRequest, this.httpOptions);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchService {\n\n  private searchBox = new BehaviorSubject('');\n  currentSearchBox = this.searchBox.asObservable();\n  constructor() { }\n\n  changeSearchBox(searchBox: string){\n    this.searchBox.next(searchBox);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SignupRequest } from '../_models/signup-request';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SignupService } from './signup.service';\nimport { AuthService } from '../auth/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  signupRequest: SignupRequest = new SignupRequest();\n  returnUrl: string;\n  errorMsg: string = '';\n  hasError: boolean = false;\n  successMsg: string = '';\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private signupService: SignupService,\n    private authService: AuthService) { }\n\n  ngOnInit() {\n    if (!this.isUserLoggedIn()) {\n      this.route.queryParams.subscribe(params => this.returnUrl = params['returnUrl'] || '/home');\n    }\n    else {\n      this.route.queryParams.subscribe(() => this.returnUrl = '/home');\n      this.router.navigateByUrl(this.returnUrl);\n    }\n  }\n\n  isUserLoggedIn() {\n    return this.authService.isUserLoggedIn();\n  }\n  handleSignup() {\n    this.signupService.handleSignup(this.signupRequest).subscribe((result) => {\n      this.router.navigateByUrl(this.returnUrl);\n    }, (result) => {\n      this.hasError = true;\n      this.errorMsg = result.error.msg;\n    });\n  }\n}\n","<div class=\"container col-lg-6\">\n    <h1 class=\"text-center\">Register</h1>\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <form class=\"form-group\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Username :</label>\n                    <input type=\"text\" class=\"form-control\" id=\"username\" [(ngModel)]=\"signupRequest.username\"\n                        placeholder=\"Enter username\" name=\"username\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Email :</label>\n                    <input type=\"text\" class=\"form-control\" type=\"email\" name=\"email\"\n                        pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$\" [(ngModel)]=\"signupRequest.email\"\n                        placeholder=\"Enter email\" ngModel #emailref=\"ngModel\">\n                    <div *ngIf=\"emailref.errors &&(emailref.touched || emailref.dirty)\" class=\"alert alert-danger\">\n                        <div [hidden]=\"!emailref.errors?.pattern\">\n                            Invalid email\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"pwd\">Password:</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" [(ngModel)]=\"signupRequest.password\"\n                        placeholder=\"Enter password\" name=\"password\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"pwd\">Re-enter password:</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password2\" [(ngModel)]=\"signupRequest.password2\"\n                        placeholder=\"Re-enter password\" name=\"password\">\n                </div>\n                <div class=\"button-wrapper\">\n                    <button class=\"btn btn-dark\" (click)=\"handleSignup()\" [disabled]=\"emailref.errors?.pattern\"\n                        style=\"margin: auto; display:block;\">Signup</button>\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class=\"error\" *ngIf='hasError'>\n        <p>{{errorMsg}}</p>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { SignupRequest } from '../_models/signup-request';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignupService {\n  signupUrl = 'https://mysterious-reaches-08183.herokuapp.com/signup';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-type': 'application/json'\n    }),\n    withCredentials: true\n  };\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  handleSignup(signupRequest: SignupRequest): Observable<any> {\n    return this.http.post<SignupRequest>(this.signupUrl, signupRequest, this.httpOptions);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SingleTicketService } from './single-ticket.service';\nimport { TicketInfo } from '../_models/ticket-info';\nimport { Alert } from '../_models/alert';\n\n@Component({\n  selector: 'app-single-ticket',\n  templateUrl: './single-ticket.component.html',\n  styleUrls: ['./single-ticket.component.css']\n})\nexport class SingleTicketComponent implements OnInit {\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private singleTicketService: SingleTicketService, ) {\n    this.route.params.subscribe(params => this.ticketId = params.ticketId);\n  }\n  newticket: TicketInfo = new TicketInfo();\n  newname: String = '';\n  newstatus: String = '';\n  newmode: Boolean = false;\n  newcron: String = '';\n  newmembers: String = '';\n  newemails: String = '';\n  newdescription: String = '';\n  newalert: Alert = new Alert();\n  dataLoaded = false;\n  ticket: TicketInfo = new TicketInfo();\n  ticketId: String = '';\n  addMemberSuccess = true;\n  ghostMembers = [];\n  statuses: any[] =\n    [\n      {\n        value: 'NEW',\n        view: 'NEW'\n      },\n      {\n        value: 'ADMITTED',\n        view: 'ADMITTED'\n      },\n      {\n        value: 'IN_PROCESS',\n        view: 'IN PROCESS'\n      },\n      {\n        value: 'ON_HOLD',\n        view: 'ON HOLD'\n      },\n      {\n        value: 'REVISED',\n        view: 'REVISED'\n      },\n      {\n        value: 'SOLVED',\n        view: 'SOLVED'\n      },\n      {\n        value: 'CLOSED',\n        view: 'CLOSED'\n      }\n    ];\n\n\n  ngOnInit(): void {\n    this.getTicket(this.ticketId);\n  }\n\n  getTicket(ticketId: String) {\n    this.singleTicketService.getTicket(ticketId).subscribe((result) => {\n      this.ticket = result.ticketsInfo[0];\n      this.newname = this.ticket.name;\n      this.newstatus = this.ticket.status;\n      this.newmode = false;\n      this.newcron = this.ticket.alert.cronExpression;\n      if (this.ticket.members != null) {\n        this.newmembers = this.ticket.members.join('; ');\n      }\n      if (this.ticket.emails != null) {\n        this.newemails = this.ticket.emails.join('; ');\n      }\n      this.newdescription = this.ticket.description;\n      this.dataLoaded = true;\n    });\n  }\n\n  handleSave() {\n    this.newticket.ticketId = this.ticket.ticketId;\n    this.newticket.name = this.newname;\n    this.newticket.status = this.newstatus;\n    this.newmode = this.ticket.alert.mode;\n    this.newalert.mode = this.newmode;\n    this.newalert.cronExpression = this.newcron;\n    this.newticket.alert = this.newalert;\n    this.newticket.description = this.newdescription;\n    this.newticket.members = this.newmembers.split(new RegExp('[,; ]')).filter(function (str) {\n      return str != null && str != \"\";\n    });\n    this.newticket.emails = this.newemails.split(new RegExp('[,; ]')).filter(function (str) {\n      return str != null && str != \"\";\n    });\n\n    this.singleTicketService.putTicket(this.newticket).subscribe((result) => {\n      this.ticket = result.ticketsInfo[0];\n      this.addMemberSuccess = true;\n      this.ghostMembers = [];\n      this.newticket.members.forEach(element => {\n        if (!this.ticket.members.includes(element)) {\n          this.addMemberSuccess = false;\n          this.ghostMembers.push(element);\n        }\n      });\n      if (this.addMemberSuccess) {\n        this.router.navigateByUrl('ticket');\n      }\n    })\n  }\n\n  handleDelete() {\n    this.singleTicketService.deleteTicket(this.ticket.ticketId).subscribe((result) => {\n      this.router.navigateByUrl('/ticket');\n    }, (result) => {\n\n    })\n\n  }\n\n  setTicketMode(e) {\n    if (e.checked) {\n      this.ticket.alert.mode = true;\n    } else {\n      this.ticket.alert.mode = false;\n    }\n  }\n\n}\n","<mat-card class=\"example-card\" *ngIf='dataLoaded'>\n    <mat-card-header style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n        <mat-card-title style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n            {{ticket.name}}\n        </mat-card-title>\n        <mat-card-subtitle>\n            {{ticket.owner}}\n        </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n        <p><b>Status: </b>{{ticket.status}}</p>\n\n        <p><b>Alert: </b>\n            <mat-slide-toggle [(ngModel)]='ticket.alert.mode' (change)='setTicketMode($event)'></mat-slide-toggle>\n        </p>\n        <p><b>Cron Expression:</b> {{ticket.alert.cronExpression}}</p>\n        <p>\n            <b>Members: </b>\n            <ng-container *ngFor='let member of ticket.members'\n                style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n                <div class=\"member\" style=\"display:inline-block;\">{{member}};</div>\n            </ng-container>\n        </p>\n        <p>\n            <b>Extra emails: </b>\n            <ng-container *ngFor='let email of ticket.emails' style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n                <p class=\"email\" style=\"display:inline-block;\">{{email}};</p>\n            </ng-container>\n        </p>\n        <p style=\"min-width: 320px ;max-width: 4000px; width: 100%;\"><b>Description: </b>{{ticket.description}}</p>\n        <mat-expansion-panel class=\"mat-elevation-z0\">\n            <mat-expansion-panel-header style=\"position: absolute; right: 0px; top: 0px;\"></mat-expansion-panel-header>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\">\n                    <input matInput placeholder=\"Ticket name\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\"\n                        [(ngModel)]=\"newname\">\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\">\n                    <mat-label>Status</mat-label>\n                    <mat-select [(ngModel)]=\"newstatus\">\n                        <mat-option *ngFor=\"let status of statuses\"\n                            style=\"min-width: 320px ;max-width: 2048px; width: 100%;\" [(value)]=\"status.value\">\n                            {{status.view}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\">\n                    <input matInput placeholder=\"Cron Expression\" [(ngModel)]=\"newcron\">\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\">\n                    <input matInput placeholder=\"Members\" [(ngModel)]=\"newmembers\">\n                    <div *ngIf=\"!addMemberSuccess && newmembers!=''\" class=\"alert alert-danger\">\n                        <div [hidden]=\"addMemberSuccess || newmembers===''\">\n                            Cannot find members {{ghostMembers}}\n                        </div>\n                    </div>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 2048px; width: 100%;\">\n                    <input matInput placeholder=\"Extra emails\" [(ngModel)]=\"newemails\"\n                        pattern=\"([a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}[;, ]{0,})+\" ngModel #emailref=\"ngModel\">\n                    <div *ngIf=\"emailref.errors &&(emailref.touched || emailref.dirty)\" class=\"alert alert-danger\">\n                        <div [hidden]=\"!emailref.errors?.pattern\">\n                            Invalid email\n                        </div>\n                    </div>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\">\n                <mat-form-field class=\"my-form-field\" style=\"min-width: 320px ;max-width: 4000px; width: 100%;\">\n                    <textarea matInput placeholder=\"Description\" rows=\"5\" cols=\"40\"\n                        [(ngModel)]=\"newdescription\"></textarea>\n                </mat-form-field>\n            </div>\n        </mat-expansion-panel>\n    </mat-card-content>\n    <mat-card-actions align=\"end\">\n        <button mat-button routerLink=\"/ticket\">BACK</button>\n        <button mat-button (click)=\"handleSave()\" [disabled]=\"emailref.errors?.pattern\">SAVE</button>\n        <button mat-button (click)=\"handleDelete()\">DELETE</button>\n    </mat-card-actions>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TicketInfo } from '../_models/ticket-info';\nimport { TicketRequest } from '../_models/ticket-request';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SingleTicketService {\n  \n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-type': 'application/json'\n    }),\n    withCredentials: true\n  };\n\n  ticketUrl = 'https://mysterious-reaches-08183.herokuapp.com/ticket';\n\n  userUrl = 'https://mysterious-reaches-08183.herokuapp.com/user/';\n\n  ticketRequest: TicketRequest = new TicketRequest();\n\n  constructor(private http: HttpClient) { }\n\n  getTicket(ticketId: String): Observable<any> {\n    return this.http.get(this.ticketUrl + '/' + ticketId, this.httpOptions);\n  }\n\n  getUsersInfoByUserIds(userIds: String[]): Observable<any> {\n    return this.http.get(`${this.userUrl}/id/${userIds}`, this.httpOptions);\n  }\n\n  putTicket(ticket: TicketInfo): Observable<any> {\n    this.ticketRequest.name = ticket.name;\n    this.ticketRequest.status = ticket.status;\n    this.ticketRequest.alert = ticket.alert;\n    this.ticketRequest.members = ticket.members;\n    this.ticketRequest.emails = ticket.emails;\n    this.ticketRequest.description = ticket.description;\n    return this.http.put<TicketInfo>(`${this.ticketUrl}/${ticket.ticketId}`, this.ticketRequest, this.httpOptions);\n  }\n  \n  deleteTicket(ticketId: String) : Observable<any> {\n    return this.http.delete(`${this.ticketUrl}/${ticketId}`,this.httpOptions);\n  }\n\n}\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { TicketsService } from './tickets.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { TicketInfo } from '../_models/ticket-info';\nimport { SearchService } from '../shared-data/search.service';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-ticket',\n  templateUrl: './tickets.component.html',\n  styleUrls: ['./tickets.component.css']\n})\nexport class TicketsComponent implements OnInit {\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private ticketsService: TicketsService,\n    private searchService: SearchService) {\n    this.subscription = searchService.currentSearchBox.subscribe(\n      searchBox => {\n        this.searchBox = searchBox;\n        this.ticketsService.getAllTickets(this.pageIndex, this.pageSize, this.sortAttribute, this.direction).subscribe(\n          (result) => {\n            this.tickets = result.content;\n            this.totalPages = result.totalPages;\n          });\n      });\n  }\n\n  sortAttribute = 'name';\n  direction = 'ASC';\n  pageIndex: number = 0;\n  pageSize: number = 5;\n  totalPages: number = 0;\n  searchBox: string;\n  tickets: TicketInfo[];\n  subscription: Subscription;\n  displayedColumns: string[] = ['order', 'name', 'description', 'cron', 'mode', 'status'];\n\n  ngOnInit() {\n    this.getAllTickets();\n  }\n\n  getAllTickets() {\n    this.ticketsService.getAllTickets(this.pageIndex, this.pageSize, this.sortAttribute, this.direction).subscribe(\n      (result) => {\n        this.tickets = result.content;\n        this.totalPages = result.totalPages;\n      });\n  }\n\n  changeSort(sortAttribute: string) {\n    if (this.sortAttribute === sortAttribute) {\n      if (this.direction === 'ASC') {\n        this.direction = 'DESC';\n      }\n      else {\n        this.direction = 'ASC';\n      }\n    }\n    else {\n      this.sortAttribute = sortAttribute;\n      this.direction = 'ASC';\n    }\n    this.getAllTickets();\n  }\n\n  getNextPage() {\n    this.pageIndex = this.pageIndex + 1;\n    this.getAllTickets();\n  }\n\n  getPreviousPage() {\n    this.pageIndex = this.pageIndex - 1;\n    this.getAllTickets();\n  }\n\n  goToNewTicket() {\n    this.router.navigateByUrl('/new-ticket')\n  }\n\n  setAlert(ticket: TicketInfo) {\n    this.ticketsService.setAlert(ticket).subscribe((result) => {\n    });\n  }\n\n\n}\n\n","<button type=\"button\" class=\"btn btn-dark\" (click)=\"getAllTickets()\">\n    Refresh\n</button>\n<button type=\"button\" class=\"btn btn-dark\" (click)=\"goToNewTicket()\">\n    Add ticket\n</button>\n<mat-table [dataSource]=\"tickets\" class=\"mat-elevation-z8\">\n\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n\n    <ng-container matColumnDef=\"order\">\n        <mat-header-cell *matHeaderCellDef> Order</mat-header-cell>\n        <mat-cell *matCellDef=\"let element; let i = index\"> {{i+1+pageIndex*pageSize}} \n            <a fxFlexFill\n                [routerLink]=\"'/ticket/'+element.ticketId\" class=\"mat-row-link\"></a>\n        </mat-cell>\n    </ng-container>\n\n\n    <ng-container matColumnDef=\"name\">\n        <mat-header-cell *matHeaderCellDef fxFlex=\"50\"> \n            <button mat-button (click)=\"changeSort('name')\">Name</button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element\" fxFlex=\"50\"> <span class=\"ellipsis\">{{element.name}} </span></mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"status\">\n        <mat-header-cell *matHeaderCellDef> \n            <button mat-button (click)=\"changeSort('status')\"> Status</button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element\"> <span class=\"ellipsis\">{{element.status}} </span></mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"mode\">\n        <mat-header-cell *matHeaderCellDef> \n            <button mat-button (click)=\"changeSort('alert.mode')\"> Mode</button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n            <mat-slide-toggle [(ngModel)]='element.alert.mode' style=\"padding-left: 10px;\" (change)=\"setAlert(element)\">\n            </mat-slide-toggle>\n        </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"cron\">\n        <mat-header-cell *matHeaderCellDef> \n            <button mat-button (click)=\"changeSort('alert.cronExpression')\"> Cron</button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element\"> {{element.alert.cronExpression}}</mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n        <mat-header-cell *matHeaderCellDef fxFlex=\"50\"> \n            <button mat-button (click)=\"changeSort('description')\"> Description </button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element\" fxFlex=\"50\"> <span class=\"ellipsis\">{{element.description}} </span>\n        </mat-cell>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n</mat-table>\n<div>\n    <button mat-button class=\"btn btn-dark\" (click)=\"getPreviousPage()\" [disabled]=\"pageIndex===0\">\n        BACK\n    </button>\n    <button mat-button class=\"btn btn-dark\" (click)=\"getNextPage()\"\n        [disabled]=\"pageIndex===(totalPages-1) || totalPages===0\">\n        NEXT\n    </button>\n</div>","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { TicketRequest } from '../_models/ticket-request';\nimport { TicketInfo } from '../_models/ticket-info';\nimport { SearchService } from '../shared-data/search.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketsService {\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-type': 'application/json'\n    }),\n    withCredentials: true\n  };\n\n  ticketUrl = 'https://mysterious-reaches-08183.herokuapp.com/ticket';\n  ticketRequest: TicketRequest = new TicketRequest();\n  searchBox: string = '';\n  constructor(private http: HttpClient, private searchService: SearchService) {\n\n  }\n  getAllTickets(pageIndex: number, pageSize: number, sortAttribute: string, direction: string): Observable<any> {\n    this.searchService.currentSearchBox.subscribe(searchBox => this.searchBox = searchBox);\n    return this.http.get(`${this.ticketUrl}?searchBox=${this.searchBox}&page=${pageIndex}&size=${pageSize}&sort=${sortAttribute},${direction}`, this.httpOptions);\n  }\n\n  setAlert(ticket: TicketInfo): Observable<any> {\n    this.ticketRequest.alert = ticket.alert;\n    this.ticketRequest.description = ticket.description;\n    this.ticketRequest.emails = ticket.emails;\n    this.ticketRequest.name = ticket.name;\n    this.ticketRequest.status = ticket.status;\n    this.ticketRequest.members = ticket.members;\n    return this.http.put(`${this.ticketUrl}/${ticket.ticketId}`, this.ticketRequest, this.httpOptions);\n  }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}